import type { LessonContent, CardContent } from '../components/LessonViewer';

// This loads actual lesson content generated by the science-lesson-generator agent
export async function generateLessonContent(
  topicId: string, 
  lessonNumber: number
): Promise<LessonContent> {
  
  // Try to load the actual lesson content from JSON file
  try {
    const lessonFileName = `${topicId.toLowerCase()}-lesson${lessonNumber}.json`;
    const response = await fetch(`/lessons/${lessonFileName}`);
    
    if (response.ok) {
      const data = await response.json();
      return data as LessonContent;
    }
  } catch (error) {
    console.log('Lesson file not found, using mock data');
  }
  
  // Fallback to mock data if no lesson file exists
  await new Promise(resolve => setTimeout(resolve, 500));
  
  // Generate sample content following the I Do → You Do pattern
  const cards: CardContent[] = [
    {
      id: '1',
      type: 'intro',
      title: 'Welcome to ' + topicId.replace(/-/g, ' '),
      content: `<p>In this lesson, we'll explore the fundamental concepts of ${topicId.replace(/-/g, ' ').toLowerCase()}.</p>
                <p>This is lesson ${lessonNumber} of 3 in this topic.</p>`
    },
    {
      id: '2',
      type: 'objective',
      title: 'Learning Objectives',
      content: `<ul>
                  <li>Understand the key concepts</li>
                  <li>Apply knowledge through practice</li>
                  <li>Build connections with previous learning</li>
                </ul>`
    },
    // CYCLE 1
    {
      id: '3',
      type: 'i-do',
      cycle: 1,
      title: 'Example 1A: Basic Concepts',
      content: `<p>Watch as I demonstrate the first concept...</p>
                <p>Notice how we apply the fundamental principles step by step.</p>`
    },
    {
      id: '4',
      type: 'i-do',
      cycle: 1,
      title: 'Example 1B: Similar Pattern',
      content: `<p>Here's another example using the same approach...</p>
                <p>The pattern remains consistent, but we apply it to a different scenario.</p>`
    },
    {
      id: '5',
      type: 'you-do',
      cycle: 1,
      title: 'Practice 1',
      content: `<p>Now it's your turn to try the basic concept.</p>`,
      interactive: {
        type: 'input',
        question: 'What is 2 + 2?',
        correctAnswer: '4',
        feedback: 'Great job applying the concept!'
      }
    },
    {
      id: '6',
      type: 'you-do',
      cycle: 1,
      title: 'Practice 2',
      content: `<p>Let's practice once more with a similar problem.</p>`,
      interactive: {
        type: 'practice',
        question: 'Describe what you observe in your own words.'
      }
    },
    // CYCLE 2
    {
      id: '7',
      type: 'i-do',
      cycle: 2,
      title: 'Example 2A: Building Complexity',
      content: `<p>Now we'll build on what we learned...</p>
                <p>This adds a new layer of understanding to the basic concept.</p>`
    },
    {
      id: '8',
      type: 'i-do',
      cycle: 2,
      title: 'Example 2B: Extended Application',
      content: `<p>Here's how we apply this in a more complex scenario...</p>`
    },
    {
      id: '9',
      type: 'you-do',
      cycle: 2,
      title: 'Practice 3',
      content: `<p>Apply what you've learned to this more complex problem.</p>`,
      interactive: {
        type: 'practice',
        question: 'Explain the relationship between the concepts.'
      }
    },
    {
      id: '10',
      type: 'you-do',
      cycle: 2,
      title: 'Practice 4',
      content: `<p>Another opportunity to practice the extended concept.</p>`,
      interactive: {
        type: 'practice',
        question: 'Create your own example of this concept.'
      }
    },
    // CYCLE 3
    {
      id: '11',
      type: 'i-do',
      cycle: 3,
      title: 'Example 3A: Complex Integration',
      content: `<p>Finally, we'll integrate everything we've learned...</p>
                <p>This combines all the previous concepts into a unified understanding.</p>`
    },
    {
      id: '12',
      type: 'i-do',
      cycle: 3,
      title: 'Example 3B: Advanced Application',
      content: `<p>Here's how experts apply these concepts in real-world scenarios...</p>`
    },
    {
      id: '13',
      type: 'you-do',
      cycle: 3,
      title: 'Practice 5: Challenge',
      content: `<p>Time for a challenging application of all concepts.</p>`,
      interactive: {
        type: 'practice',
        question: 'Solve this complex problem using all the concepts learned.'
      }
    },
    {
      id: '14',
      type: 'you-do',
      cycle: 3,
      title: 'Practice 6: Mastery',
      content: `<p>Final practice to demonstrate mastery.</p>`,
      interactive: {
        type: 'practice',
        question: 'Create and solve your own complex problem.'
      }
    },
    {
      id: '15',
      type: 'summary',
      title: 'Lesson Summary',
      content: `<p>Excellent work! You've completed lesson ${lessonNumber}.</p>
                <h3>Key Takeaways:</h3>
                <ul>
                  <li>Mastered basic concepts through guided examples</li>
                  <li>Built complexity through progressive practice</li>
                  <li>Integrated knowledge for advanced applications</li>
                </ul>
                <p>You're ready to move on to the next lesson!</p>`
    }
  ];

  return {
    cards,
    totalCards: cards.length
  };
}

// Future: This will be replaced with an actual agent call
export async function callLessonGeneratorAgent(
  topicId: string,
  lessonNumber: number,
  _lessonPlanPath: string
): Promise<LessonContent> {
  // This would make an API call to the lesson-generator agent
  // The agent would:
  // 1. Read the lesson plan markdown from lessonPlanPath
  // 2. Parse the I Do → You Do cycles
  // 3. Generate interactive content
  // 4. Return structured JSON
  
  // For now, return the mock data
  return generateLessonContent(topicId, lessonNumber);
}